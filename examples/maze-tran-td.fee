---
category: laplace
intro: |
  ## Transient top-down
 
  Instead of solving a steady-state en exploiting the ellipticity of Laplaceâ€™s operator,
  let us see what happens if we solve a transient instead.
terminal: | 
  $ feenox maze-tran-td.fee
  0
  0.00433078
  0.00949491
  0.0170774
  0.0268599
  [...]
  55.8631
  64.0819
  74.5784
  87.2892
  100
  $ gmsh maze-tran-td-anim.geo
  # all frames dumped, now run
  ffmpeg -y -framerate 20 -f image2 -i maze-tran-td-%03d.png maze-tran-td.mp4
  ffmpeg -y -framerate 20 -f image2 -i maze-tran-td-%03d.png maze-tran-td.gif
  $ ffmpeg -y -framerate 20 -f image2 -i maze-tran-td-%03d.png maze-tran-td.mp4
  [...]
  $ ffmpeg -y -framerate 20 -f image2 -i maze-tran-td-%03d.png maze-tran-td.gif
  [...]
...
PROBLEM laplace 2D
READ_MESH maze.msh

phi_0(x,y) = 0              # initial condition
end_time = 100              # some end time where we know we reached the steady-state
alpha = 1e-6                # factor of the time derivative to make it advance faster
BC start   phi=if(t<1,t,1)  # a ramp from zero to avoid discontinuities with the initial condition
BC end     phi=0            # homogeneous BC at the end (so we move from top to bottom)

SOLVE_PROBLEM
PRINT t

WRITE_MESH maze-tran-td.msh phi    sqrt(dphidx(x,y)^2+dphidy(x,y)^2) VECTOR -dphidx(x,y) -dphidy(x,y) 0 
WRITE_RESULTS FILE maze-tran-td.vtu
---
figures: |
 ![Transient top-bottom solution to the maze found by FeenoX (and drawn by Gmsh)](maze-tran-td.gif){width_html=100% width_latex=50%}
...
